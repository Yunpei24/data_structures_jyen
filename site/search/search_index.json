{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf31 Welcome to JYEN Data Structures","text":"<p>\ud83c\udf93 This project is a comprehensive and educational resource showcasing classic data structures implemented in Python. Whether you're a student, a developer, or a curious learner, this guide will help you master core data structures with clear examples and hands-on notebooks.</p>"},{"location":"#what-youll-find","title":"\ud83d\udcda What You\u2019ll Find","text":"<p>Dive into well-organized sections, each dedicated to a fundamental data structure:</p> <ul> <li>\u2705 Arrays \u2013 Static and dynamic storage structures.</li> <li>\u2705 Stacks \u2013 Last-In, First-Out (LIFO) operations.</li> <li>\u2705 Queues \u2013 First-In, First-Out (FIFO) workflows.</li> <li>\u2705 Linked Lists \u2013 Sequential nodes linked dynamically.</li> <li>\u2705 Trees \u2013 Hierarchical structures for sorted data.</li> <li>\u2705 Graphs \u2013 Representing relationships between elements.</li> </ul> <p>Each section includes:</p> <ul> <li>\u2728 Concept explanations</li> <li>\ud83d\udcbb Python code examples</li> <li>\ud83d\udcd3 Interactive Jupyter Notebooks (coming soon)</li> </ul>"},{"location":"#get-started","title":"\ud83d\ude80 Get Started","text":"<p>Click on a topic in the navigation bar to begin exploring!</p> <p>If you're viewing this on GitHub, you can also explore the full source code and notebooks here: \ud83d\udd17 GitHub Repository</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>This project is open-source and welcomes contributions. Feel free to open issues, suggest improvements, or add your own implementations!</p>"},{"location":"#author","title":"\ud83d\udc68\u200d\ud83d\udcbb Author","text":"<p>Made with \u2764\ufe0f by Joshua Juste Emmanuel Yun Pei NIKIEMA @yunpei24</p> <p>\"Mastering data structures is the first step toward becoming a great software engineer.\" </p>"},{"location":"array/","title":"Arrays","text":"<p>Arrays are basic data structures used to store elements in a contiguous memory location.</p>"},{"location":"array/#features","title":"Features","text":"<ul> <li>Fast index-based access</li> <li>Static size</li> </ul>"},{"location":"array/#example","title":"Example","text":"<p>Check the Array Notebook.</p>"},{"location":"linked_list/","title":"Linked List","text":"<p>Linked List are basic data structures used to store elements in a contiguous memory location.</p>"},{"location":"linked_list/#features","title":"Features","text":"<ul> <li>Fast index-based access</li> <li>Static size</li> </ul>"},{"location":"linked_list/#example","title":"Example","text":"<p>Check the Array Notebook.</p>"},{"location":"queue/","title":"Queues","text":"<p>A queue is a linear data structure that follows the FIFO (First In First Out) principle.</p>"},{"location":"queue/#characteristics","title":"Characteristics","text":"<ul> <li>Elements are added from the rear and removed from the front.</li> <li>Used in scheduling, buffering, and task queues.</li> </ul>"},{"location":"queue/#common-operations","title":"Common Operations","text":"<ul> <li><code>enqueue()</code>: Add an item to the queue.</li> <li><code>dequeue()</code>: Remove the front item.</li> <li><code>peek()</code>: View the front item.</li> <li><code>is_empty()</code>: Check if the queue is empty.</li> </ul>"},{"location":"queue/#example-notebook","title":"Example Notebook","text":"<p>\ud83d\udc49 See Queue Example Notebook</p>"},{"location":"stack/","title":"Stacks","text":"<p>A stack is a linear data structure that follows the LIFO (Last In First Out) principle.</p>"},{"location":"stack/#characteristics","title":"Characteristics","text":"<ul> <li>Elements are added (pushed) and removed (popped) from the top.</li> <li>Useful for undo operations, expression evaluation, and more.</li> </ul>"},{"location":"stack/#common-operations","title":"Common Operations","text":"<ul> <li><code>push()</code>: Add an item to the stack.</li> <li><code>pop()</code>: Remove the top item.</li> <li><code>peek()</code>: View the top item without removing it.</li> <li><code>is_empty()</code>: Check if the stack is empty.</li> </ul>"},{"location":"stack/#example-notebook","title":"Example Notebook","text":"<p>\ud83d\udc49 See Stack Example Notebook</p>"},{"location":"tree/","title":"Trees","text":"<p>A tree is a hierarchical data structure with nodes connected in parent-child relationships.</p>"},{"location":"tree/#characteristics","title":"Characteristics","text":"<ul> <li>The topmost node is called the root.</li> <li>Each node can have multiple children.</li> <li>Used in file systems, databases, compilers, etc.</li> </ul>"},{"location":"tree/#types","title":"Types","text":"<ul> <li>Binary Tree</li> <li>Binary Search Tree (BST)</li> <li>AVL Tree</li> <li>Heap</li> </ul>"},{"location":"tree/#common-operations","title":"Common Operations","text":"<ul> <li><code>insert()</code>, <code>delete()</code>, <code>traverse()</code> (preorder, inorder, postorder)</li> </ul>"},{"location":"tree/#example-notebook","title":"Example Notebook","text":"<p>\ud83d\udc49 See Tree Example Notebook</p>"}]}